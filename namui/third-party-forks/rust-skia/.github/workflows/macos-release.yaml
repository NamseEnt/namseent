# Generated by mk-workflows.

name: 'macos-release'
on:
  push:
    branches:
      - release

concurrency:
  group: 'macos-release-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  macos-release-release:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features '
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features '
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features '
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features '
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features '
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-gl:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features gl'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "gl" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "gl" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features gl'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features gl'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features gl'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features gl'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-vulkan:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "vulkan" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "vulkan" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "vulkan" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "vulkan" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "vulkan" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "vulkan" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "vulkan" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "vulkan" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "vulkan" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "vulkan" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "vulkan" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "vulkan" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "vulkan" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "vulkan" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "vulkan" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "vulkan" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "vulkan" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "vulkan" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "vulkan" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "vulkan" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-textlayout:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "textlayout" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "textlayout" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-gl-textlayout:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features gl,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "gl,textlayout" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "gl,textlayout" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features gl,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features gl,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features gl,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features gl,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-textlayout-vulkan:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout,vulkan" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "textlayout,vulkan" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "textlayout,vulkan" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout,vulkan" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout,vulkan" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout,vulkan" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout,vulkan" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout,vulkan" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout,vulkan" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout,vulkan" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout,vulkan" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "textlayout,vulkan" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "textlayout,vulkan" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "textlayout,vulkan" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "textlayout,vulkan" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-gl-textlayout-vulkan:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features gl,textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout,vulkan" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "gl,textlayout,vulkan" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "gl,textlayout,vulkan" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout,vulkan" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features gl,textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout,vulkan" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout,vulkan" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features gl,textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout,vulkan" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout,vulkan" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features gl,textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout,vulkan" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout,vulkan" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout,vulkan" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features gl,textlayout,vulkan'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,textlayout,vulkan" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,textlayout,vulkan" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,textlayout,vulkan" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,textlayout,vulkan" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-metal:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.14'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features metal'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "metal" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "metal" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features metal'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features metal'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features metal'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features metal'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-metal-textlayout:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.14'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features metal,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal,textlayout" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "metal,textlayout" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "metal,textlayout" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal,textlayout" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features metal,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal,textlayout" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal,textlayout" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal,textlayout" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal,textlayout" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features metal,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal,textlayout" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal,textlayout" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal,textlayout" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal,textlayout" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features metal,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal,textlayout" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal,textlayout" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal,textlayout" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal,textlayout" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features metal,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "metal,textlayout" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "metal,textlayout" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "metal,textlayout" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "metal,textlayout" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  macos-release-release-gl-svg-textlayout:
    runs-on: macos-13
    env:
      SKIA_DEBUG: 0
      MACOSX_DEPLOYMENT_TARGET: '10.13'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin

    - name: 'Build skia-safe for x86_64-apple-darwin with features gl,svg,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,svg,textlayout" --target x86_64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "gl,svg,textlayout" --all-targets --target x86_64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "gl,svg,textlayout" --all-targets --target x86_64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,svg,textlayout" --target x86_64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-darwin'
      shell: bash
      run: |
        rustup target add aarch64-apple-darwin

    - name: 'Build skia-safe for aarch64-apple-darwin with features gl,svg,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-darwin26-clang
          export CXX_${TARGET}=aarch64-apple-darwin26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,svg,textlayout" --target aarch64-apple-darwin
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-darwin -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-darwin -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,svg,textlayout" --target aarch64-apple-darwin "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-darwin
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios

    - name: 'Build skia-safe for aarch64-apple-ios with features gl,svg,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,svg,textlayout" --target aarch64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,svg,textlayout" --target aarch64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target aarch64-apple-ios-sim'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios-sim

    - name: 'Build skia-safe for aarch64-apple-ios-sim with features gl,svg,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios-sim
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios-sim26-clang
          export CXX_${TARGET}=aarch64-apple-ios-sim26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios-sim26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,svg,textlayout" --target aarch64-apple-ios-sim
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-ios-sim -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,svg,textlayout" --all-targets --target aarch64-apple-ios-sim -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,svg,textlayout" --target aarch64-apple-ios-sim "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-aarch64-apple-ios-sim
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios

    - name: 'Build skia-safe for x86_64-apple-ios with features gl,svg,textlayout'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "gl,svg,textlayout" --target x86_64-apple-ios
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features "gl,svg,textlayout" --all-targets --target x86_64-apple-ios -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features "gl,svg,textlayout" --all-targets --target x86_64-apple-ios -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "gl,svg,textlayout" --target x86_64-apple-ios "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v3.1.1
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: true
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: true
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true