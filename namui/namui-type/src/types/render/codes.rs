// NOTE : Reference 1 - https://www.w3.org/TR/uievents-code/
// NOTE : Reference 2 - https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values
// NOTE : YOU MUST NOT CHANGE ENUM NAMES!
use std::str::FromStr;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[repr(u8)]
pub enum Code {
    Escape = 0,
    Digit1,
    Digit2,
    Digit3,
    Digit4,
    Digit5,
    Digit6,
    Digit7,
    Digit8,
    Digit9,
    Digit0,
    Minus,
    Equal,
    Backspace,
    Tab,
    KeyQ,
    KeyW,
    KeyE,
    KeyR,
    KeyT,
    KeyY,
    KeyU,
    KeyI,
    KeyO,
    KeyP,
    BracketLeft,
    BracketRight,
    Enter,
    ControlLeft,
    KeyA,
    KeyS,
    KeyD,
    KeyF,
    KeyG,
    KeyH,
    KeyJ,
    KeyK,
    KeyL,
    Semicolon,
    Quote,
    Backquote,
    ShiftLeft,
    Backslash,
    KeyZ,
    KeyX,
    KeyC,
    KeyV,
    KeyB,
    KeyN,
    KeyM,
    Comma,
    Period,
    Slash,
    ShiftRight,
    AltLeft,
    Space,
    CapsLock,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    Pause,
    ScrollLock,
    IntlBackslash,
    F11,
    F12,
    ControlRight,
    PrintScreen,
    AltRight,
    NumLock,
    Home,
    ArrowUp,
    PageUp,
    ArrowLeft,
    ArrowRight,
    End,
    ArrowDown,
    PageDown,
    Insert,
    Delete,
    ContextMenu,
    // Below are from winit::keyboard::KeyCode
    IntlRo,
    IntlYen,
    SuperLeft,
    SuperRight,
    Convert,
    KanaMode,
    Lang1,
    Lang2,
    Lang3,
    Lang4,
    Lang5,
    NonConvert,
    Help,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadBackspace,
    NumpadClear,
    NumpadClearEntry,
    NumpadComma,
    NumpadDecimal,
    NumpadDivide,
    NumpadEnter,
    NumpadEqual,
    NumpadHash,
    NumpadMemoryAdd,
    NumpadMemoryClear,
    NumpadMemoryRecall,
    NumpadMemoryStore,
    NumpadMemorySubtract,
    NumpadMultiply,
    NumpadParenLeft,
    NumpadParenRight,
    NumpadStar,
    NumpadSubtract,
    Fn,
    FnLock,
    BrowserBack,
    BrowserFavorites,
    BrowserForward,
    BrowserHome,
    BrowserRefresh,
    BrowserSearch,
    BrowserStop,
    Eject,
    LaunchApp1,
    LaunchApp2,
    LaunchMail,
    MediaPlayPause,
    MediaSelect,
    MediaStop,
    MediaTrackNext,
    MediaTrackPrevious,
    Power,
    Sleep,
    AudioVolumeDown,
    AudioVolumeMute,
    AudioVolumeUp,
    WakeUp,
    Meta,
    Hyper,
    Turbo,
    Abort,
    Resume,
    Suspend,
    Again,
    Copy,
    Cut,
    Find,
    Open,
    Paste,
    Props,
    Select,
    Undo,
    Hiragana,
    Katakana,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    F25,
    F26,
    F27,
    F28,
    F29,
    F30,
    F31,
    F32,
    F33,
    F34,
    F35,
}

impl FromStr for Code {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Escape" => Ok(Code::Escape),
            "Digit1" => Ok(Code::Digit1),
            "Digit2" => Ok(Code::Digit2),
            "Digit3" => Ok(Code::Digit3),
            "Digit4" => Ok(Code::Digit4),
            "Digit5" => Ok(Code::Digit5),
            "Digit6" => Ok(Code::Digit6),
            "Digit7" => Ok(Code::Digit7),
            "Digit8" => Ok(Code::Digit8),
            "Digit9" => Ok(Code::Digit9),
            "Digit0" => Ok(Code::Digit0),
            "Minus" => Ok(Code::Minus),
            "Equal" => Ok(Code::Equal),
            "Backspace" => Ok(Code::Backspace),
            "Tab" => Ok(Code::Tab),
            "KeyQ" => Ok(Code::KeyQ),
            "KeyW" => Ok(Code::KeyW),
            "KeyE" => Ok(Code::KeyE),
            "KeyR" => Ok(Code::KeyR),
            "KeyT" => Ok(Code::KeyT),
            "KeyY" => Ok(Code::KeyY),
            "KeyU" => Ok(Code::KeyU),
            "KeyI" => Ok(Code::KeyI),
            "KeyO" => Ok(Code::KeyO),
            "KeyP" => Ok(Code::KeyP),
            "BracketLeft" => Ok(Code::BracketLeft),
            "BracketRight" => Ok(Code::BracketRight),
            "Enter" => Ok(Code::Enter),
            "ControlLeft" => Ok(Code::ControlLeft),
            "KeyA" => Ok(Code::KeyA),
            "KeyS" => Ok(Code::KeyS),
            "KeyD" => Ok(Code::KeyD),
            "KeyF" => Ok(Code::KeyF),
            "KeyG" => Ok(Code::KeyG),
            "KeyH" => Ok(Code::KeyH),
            "KeyJ" => Ok(Code::KeyJ),
            "KeyK" => Ok(Code::KeyK),
            "KeyL" => Ok(Code::KeyL),
            "Semicolon" => Ok(Code::Semicolon),
            "Quote" => Ok(Code::Quote),
            "Backquote" => Ok(Code::Backquote),
            "ShiftLeft" => Ok(Code::ShiftLeft),
            "Backslash" => Ok(Code::Backslash),
            "KeyZ" => Ok(Code::KeyZ),
            "KeyX" => Ok(Code::KeyX),
            "KeyC" => Ok(Code::KeyC),
            "KeyV" => Ok(Code::KeyV),
            "KeyB" => Ok(Code::KeyB),
            "KeyN" => Ok(Code::KeyN),
            "KeyM" => Ok(Code::KeyM),
            "Comma" => Ok(Code::Comma),
            "Period" => Ok(Code::Period),
            "Slash" => Ok(Code::Slash),
            "ShiftRight" => Ok(Code::ShiftRight),
            "AltLeft" => Ok(Code::AltLeft),
            "Space" => Ok(Code::Space),
            "CapsLock" => Ok(Code::CapsLock),
            "F1" => Ok(Code::F1),
            "F2" => Ok(Code::F2),
            "F3" => Ok(Code::F3),
            "F4" => Ok(Code::F4),
            "F5" => Ok(Code::F5),
            "F6" => Ok(Code::F6),
            "F7" => Ok(Code::F7),
            "F8" => Ok(Code::F8),
            "F9" => Ok(Code::F9),
            "F10" => Ok(Code::F10),
            "Pause" => Ok(Code::Pause),
            "ScrollLock" => Ok(Code::ScrollLock),
            "IntlBackslash" => Ok(Code::IntlBackslash),
            "F11" => Ok(Code::F11),
            "F12" => Ok(Code::F12),
            "ControlRight" => Ok(Code::ControlRight),
            "PrintScreen" => Ok(Code::PrintScreen),
            "AltRight" => Ok(Code::AltRight),
            "NumLock" => Ok(Code::NumLock),
            "Home" => Ok(Code::Home),
            "ArrowUp" => Ok(Code::ArrowUp),
            "PageUp" => Ok(Code::PageUp),
            "ArrowLeft" => Ok(Code::ArrowLeft),
            "ArrowRight" => Ok(Code::ArrowRight),
            "End" => Ok(Code::End),
            "ArrowDown" => Ok(Code::ArrowDown),
            "PageDown" => Ok(Code::PageDown),
            "Insert" => Ok(Code::Insert),
            "Delete" => Ok(Code::Delete),
            "ContextMenu" => Ok(Code::ContextMenu),
            _ => Err(format!("Unknown code: {s}")),
        }
    }
}

impl std::fmt::Display for Code {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let str = match self {
            Code::Escape => "Escape",
            Code::Digit1 => "Digit1",
            Code::Digit2 => "Digit2",
            Code::Digit3 => "Digit3",
            Code::Digit4 => "Digit4",
            Code::Digit5 => "Digit5",
            Code::Digit6 => "Digit6",
            Code::Digit7 => "Digit7",
            Code::Digit8 => "Digit8",
            Code::Digit9 => "Digit9",
            Code::Digit0 => "Digit0",
            Code::Minus => "Minus",
            Code::Equal => "Equal",
            Code::Backspace => "Backspace",
            Code::Tab => "Tab",
            Code::KeyQ => "KeyQ",
            Code::KeyW => "KeyW",
            Code::KeyE => "KeyE",
            Code::KeyR => "KeyR",
            Code::KeyT => "KeyT",
            Code::KeyY => "KeyY",
            Code::KeyU => "KeyU",
            Code::KeyI => "KeyI",
            Code::KeyO => "KeyO",
            Code::KeyP => "KeyP",
            Code::BracketLeft => "BracketLeft",
            Code::BracketRight => "BracketRight",
            Code::Enter => "Enter",
            Code::ControlLeft => "ControlLeft",
            Code::KeyA => "KeyA",
            Code::KeyS => "KeyS",
            Code::KeyD => "KeyD",
            Code::KeyF => "KeyF",
            Code::KeyG => "KeyG",
            Code::KeyH => "KeyH",
            Code::KeyJ => "KeyJ",
            Code::KeyK => "KeyK",
            Code::KeyL => "KeyL",
            Code::Semicolon => "Semicolon",
            Code::Quote => "Quote",
            Code::Backquote => "Backquote",
            Code::ShiftLeft => "ShiftLeft",
            Code::Backslash => "Backslash",
            Code::KeyZ => "KeyZ",
            Code::KeyX => "KeyX",
            Code::KeyC => "KeyC",
            Code::KeyV => "KeyV",
            Code::KeyB => "KeyB",
            Code::KeyN => "KeyN",
            Code::KeyM => "KeyM",
            Code::Comma => "Comma",
            Code::Period => "Period",
            Code::Slash => "Slash",
            Code::ShiftRight => "ShiftRight",
            Code::AltLeft => "AltLeft",
            Code::Space => "Space",
            Code::CapsLock => "CapsLock",
            Code::F1 => "F1",
            Code::F2 => "F2",
            Code::F3 => "F3",
            Code::F4 => "F4",
            Code::F5 => "F5",
            Code::F6 => "F6",
            Code::F7 => "F7",
            Code::F8 => "F8",
            Code::F9 => "F9",
            Code::F10 => "F10",
            Code::Pause => "Pause",
            Code::ScrollLock => "ScrollLock",
            Code::IntlBackslash => "IntlBackslash",
            Code::F11 => "F11",
            Code::F12 => "F12",
            Code::ControlRight => "ControlRight",
            Code::PrintScreen => "PrintScreen",
            Code::AltRight => "AltRight",
            Code::NumLock => "NumLock",
            Code::Home => "Home",
            Code::ArrowUp => "ArrowUp",
            Code::PageUp => "PageUp",
            Code::ArrowLeft => "ArrowLeft",
            Code::ArrowRight => "ArrowRight",
            Code::End => "End",
            Code::ArrowDown => "ArrowDown",
            Code::PageDown => "PageDown",
            Code::Insert => "Insert",
            Code::Delete => "Delete",
            Code::ContextMenu => "ContextMenu",
            Code::IntlRo => "IntlRo",
            Code::IntlYen => "IntlYen",
            Code::SuperLeft => "SuperLeft",
            Code::SuperRight => "SuperRight",
            Code::Convert => "Convert",
            Code::KanaMode => "KanaMode",
            Code::Lang1 => "Lang1",
            Code::Lang2 => "Lang2",
            Code::Lang3 => "Lang3",
            Code::Lang4 => "Lang4",
            Code::Lang5 => "Lang5",
            Code::NonConvert => "NonConvert",
            Code::Help => "Help",
            Code::Numpad0 => "Numpad0",
            Code::Numpad1 => "Numpad1",
            Code::Numpad2 => "Numpad2",
            Code::Numpad3 => "Numpad3",
            Code::Numpad4 => "Numpad4",
            Code::Numpad5 => "Numpad5",
            Code::Numpad6 => "Numpad6",
            Code::Numpad7 => "Numpad7",
            Code::Numpad8 => "Numpad8",
            Code::Numpad9 => "Numpad9",
            Code::NumpadAdd => "NumpadAdd",
            Code::NumpadBackspace => "NumpadBackspace",
            Code::NumpadClear => "NumpadClear",
            Code::NumpadClearEntry => "NumpadClearEntry",
            Code::NumpadComma => "NumpadComma",
            Code::NumpadDecimal => "NumpadDecimal",
            Code::NumpadDivide => "NumpadDivide",
            Code::NumpadEnter => "NumpadEnter",
            Code::NumpadEqual => "NumpadEqual",
            Code::NumpadHash => "NumpadHash",
            Code::NumpadMemoryAdd => "NumpadMemoryAdd",
            Code::NumpadMemoryClear => "NumpadMemoryClear",
            Code::NumpadMemoryRecall => "NumpadMemoryRecall",
            Code::NumpadMemoryStore => "NumpadMemoryStore",
            Code::NumpadMemorySubtract => "NumpadMemorySubtract",
            Code::NumpadMultiply => "NumpadMultiply",
            Code::NumpadParenLeft => "NumpadParenLeft",
            Code::NumpadParenRight => "NumpadParenRight",
            Code::NumpadStar => "NumpadStar",
            Code::NumpadSubtract => "NumpadSubtract",
            Code::Fn => "Fn",
            Code::FnLock => "FnLock",
            Code::BrowserBack => "BrowserBack",
            Code::BrowserFavorites => "BrowserFavorites",
            Code::BrowserForward => "BrowserForward",
            Code::BrowserHome => "BrowserHome",
            Code::BrowserRefresh => "BrowserRefresh",
            Code::BrowserSearch => "BrowserSearch",
            Code::BrowserStop => "BrowserStop",
            Code::Eject => "Eject",
            Code::LaunchApp1 => "LaunchApp1",
            Code::LaunchApp2 => "LaunchApp2",
            Code::LaunchMail => "LaunchMail",
            Code::MediaPlayPause => "MediaPlayPause",
            Code::MediaSelect => "MediaSelect",
            Code::MediaStop => "MediaStop",
            Code::MediaTrackNext => "MediaTrackNext",
            Code::MediaTrackPrevious => "MediaTrackPrevious",
            Code::Power => "Power",
            Code::Sleep => "Sleep",
            Code::AudioVolumeDown => "AudioVolumeDown",
            Code::AudioVolumeMute => "AudioVolumeMute",
            Code::AudioVolumeUp => "AudioVolumeUp",
            Code::WakeUp => "WakeUp",
            Code::Meta => "Meta",
            Code::Hyper => "Hyper",
            Code::Turbo => "Turbo",
            Code::Abort => "Abort",
            Code::Resume => "Resume",
            Code::Suspend => "Suspend",
            Code::Again => "Again",
            Code::Copy => "Copy",
            Code::Cut => "Cut",
            Code::Find => "Find",
            Code::Open => "Open",
            Code::Paste => "Paste",
            Code::Props => "Props",
            Code::Select => "Select",
            Code::Undo => "Undo",
            Code::Hiragana => "Hiragana",
            Code::Katakana => "Katakana",
            Code::F13 => "F13",
            Code::F14 => "F14",
            Code::F15 => "F15",
            Code::F16 => "F16",
            Code::F17 => "F17",
            Code::F18 => "F18",
            Code::F19 => "F19",
            Code::F20 => "F20",
            Code::F21 => "F21",
            Code::F22 => "F22",
            Code::F23 => "F23",
            Code::F24 => "F24",
            Code::F25 => "F25",
            Code::F26 => "F26",
            Code::F27 => "F27",
            Code::F28 => "F28",
            Code::F29 => "F29",
            Code::F30 => "F30",
            Code::F31 => "F31",
            Code::F32 => "F32",
            Code::F33 => "F33",
            Code::F34 => "F34",
            Code::F35 => "F35",
        };

        write!(f, "{str}")
    }
}

impl TryFrom<u8> for Code {
    type Error = u8;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        const MAP: [Code; 194] = [
            Code::Escape,
            Code::Digit1,
            Code::Digit2,
            Code::Digit3,
            Code::Digit4,
            Code::Digit5,
            Code::Digit6,
            Code::Digit7,
            Code::Digit8,
            Code::Digit9,
            Code::Digit0,
            Code::Minus,
            Code::Equal,
            Code::Backspace,
            Code::Tab,
            Code::KeyQ,
            Code::KeyW,
            Code::KeyE,
            Code::KeyR,
            Code::KeyT,
            Code::KeyY,
            Code::KeyU,
            Code::KeyI,
            Code::KeyO,
            Code::KeyP,
            Code::BracketLeft,
            Code::BracketRight,
            Code::Enter,
            Code::ControlLeft,
            Code::KeyA,
            Code::KeyS,
            Code::KeyD,
            Code::KeyF,
            Code::KeyG,
            Code::KeyH,
            Code::KeyJ,
            Code::KeyK,
            Code::KeyL,
            Code::Semicolon,
            Code::Quote,
            Code::Backquote,
            Code::ShiftLeft,
            Code::Backslash,
            Code::KeyZ,
            Code::KeyX,
            Code::KeyC,
            Code::KeyV,
            Code::KeyB,
            Code::KeyN,
            Code::KeyM,
            Code::Comma,
            Code::Period,
            Code::Slash,
            Code::ShiftRight,
            Code::AltLeft,
            Code::Space,
            Code::CapsLock,
            Code::F1,
            Code::F2,
            Code::F3,
            Code::F4,
            Code::F5,
            Code::F6,
            Code::F7,
            Code::F8,
            Code::F9,
            Code::F10,
            Code::Pause,
            Code::ScrollLock,
            Code::IntlBackslash,
            Code::F11,
            Code::F12,
            Code::ControlRight,
            Code::PrintScreen,
            Code::AltRight,
            Code::NumLock,
            Code::Home,
            Code::ArrowUp,
            Code::PageUp,
            Code::ArrowLeft,
            Code::ArrowRight,
            Code::End,
            Code::ArrowDown,
            Code::PageDown,
            Code::Insert,
            Code::Delete,
            Code::ContextMenu,
            Code::IntlRo,
            Code::IntlYen,
            Code::SuperLeft,
            Code::SuperRight,
            Code::Convert,
            Code::KanaMode,
            Code::Lang1,
            Code::Lang2,
            Code::Lang3,
            Code::Lang4,
            Code::Lang5,
            Code::NonConvert,
            Code::Help,
            Code::Numpad0,
            Code::Numpad1,
            Code::Numpad2,
            Code::Numpad3,
            Code::Numpad4,
            Code::Numpad5,
            Code::Numpad6,
            Code::Numpad7,
            Code::Numpad8,
            Code::Numpad9,
            Code::NumpadAdd,
            Code::NumpadBackspace,
            Code::NumpadClear,
            Code::NumpadClearEntry,
            Code::NumpadComma,
            Code::NumpadDecimal,
            Code::NumpadDivide,
            Code::NumpadEnter,
            Code::NumpadEqual,
            Code::NumpadHash,
            Code::NumpadMemoryAdd,
            Code::NumpadMemoryClear,
            Code::NumpadMemoryRecall,
            Code::NumpadMemoryStore,
            Code::NumpadMemorySubtract,
            Code::NumpadMultiply,
            Code::NumpadParenLeft,
            Code::NumpadParenRight,
            Code::NumpadStar,
            Code::NumpadSubtract,
            Code::Fn,
            Code::FnLock,
            Code::BrowserBack,
            Code::BrowserFavorites,
            Code::BrowserForward,
            Code::BrowserHome,
            Code::BrowserRefresh,
            Code::BrowserSearch,
            Code::BrowserStop,
            Code::Eject,
            Code::LaunchApp1,
            Code::LaunchApp2,
            Code::LaunchMail,
            Code::MediaPlayPause,
            Code::MediaSelect,
            Code::MediaStop,
            Code::MediaTrackNext,
            Code::MediaTrackPrevious,
            Code::Power,
            Code::Sleep,
            Code::AudioVolumeDown,
            Code::AudioVolumeMute,
            Code::AudioVolumeUp,
            Code::WakeUp,
            Code::Meta,
            Code::Hyper,
            Code::Turbo,
            Code::Abort,
            Code::Resume,
            Code::Suspend,
            Code::Again,
            Code::Copy,
            Code::Cut,
            Code::Find,
            Code::Open,
            Code::Paste,
            Code::Props,
            Code::Select,
            Code::Undo,
            Code::Hiragana,
            Code::Katakana,
            Code::F13,
            Code::F14,
            Code::F15,
            Code::F16,
            Code::F17,
            Code::F18,
            Code::F19,
            Code::F20,
            Code::F21,
            Code::F22,
            Code::F23,
            Code::F24,
            Code::F25,
            Code::F26,
            Code::F27,
            Code::F28,
            Code::F29,
            Code::F30,
            Code::F31,
            Code::F32,
            Code::F33,
            Code::F34,
            Code::F35,
        ];

        if value < MAP.len() as u8 {
            Ok(MAP[value as usize])
        } else {
            Err(value)
        }
    }
}
