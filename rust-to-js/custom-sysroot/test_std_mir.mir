// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _5: &i32;
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &[&str; 2];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let mut _11: std::boxed::Box<[i32]>;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: *mut u8;
    let mut _15: std::boxed::Box<[i32; 3]>;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _19: &std::vec::Vec<i32>;
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &[&str; 2];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let mut _24: &i32;
    let mut _25: &std::vec::Vec<i32>;
    let mut _26: *const [i32; 3];
    let mut _27: std::ptr::NonNull<[i32; 3]>;
    let mut _28: std::ptr::Unique<[i32; 3]>;
    let mut _29: *const [i32; 3];
    scope 1 {
        debug a => _1;
        let _4: (&i32,);
        let _10: std::vec::Vec<i32>;
        let mut _30: *const ();
        let mut _31: usize;
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: bool;
        let mut _36: *const ();
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: bool;
        let mut _40: bool;
        let mut _41: bool;
        let mut _42: bool;
        scope 2 {
            debug args => _4;
            let _6: [core::fmt::rt::Argument<'_>; 1];
            scope 3 {
                debug args => _6;
            }
        }
        scope 4 {
            debug v => _10;
            let _18: (&std::vec::Vec<i32>,);
            scope 5 {
                debug args => _18;
                let _20: [core::fmt::rt::Argument<'_>; 1];
                scope 6 {
                    debug args => _20;
                }
            }
        }
    }

    bb0: {
        _1 = const 5_i32;
        _5 = &_1;
        _4 = (move _5,);
        _24 = copy (_4.0: &i32);
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _24) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _6 = [move _7];
        _8 = const main::promoted[1];
        _9 = &_6;
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _8, copy _9) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        _12 = SizeOf([i32; 3]);
        _13 = AlignOf([i32; 3]);
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        _26 = move _14 as *const [i32; 3] (Transmute);
        _27 = NonNull::<[i32; 3]> { pointer: move _26 };
        _28 = Unique::<[i32; 3]> { pointer: move _27, _marker: const PhantomData::<[i32; 3]> };
        _15 = Box::<[i32; 3]>(move _28, const std::alloc::Global);
        _29 = copy ((_15.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>) as *const [i32; 3] (Transmute);
        _30 = copy _29 as *const () (PtrToPtr);
        _31 = copy _30 as usize (Transmute);
        _32 = AlignOf([i32; 3]);
        _33 = Sub(copy _32, const 1_usize);
        _34 = BitAnd(copy _31, copy _33);
        _35 = Eq(copy _34, const 0_usize);
        assert(copy _35, "misaligned pointer dereference: address must be a multiple of {} but is {}", copy _32, copy _31) -> [success: bb10, unwind unreachable];
    }

    bb5: {
        _19 = &_10;
        _18 = (move _19,);
        _25 = copy (_18.0: &std::vec::Vec<i32>);
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(copy _25) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        _20 = [move _21];
        _22 = const main::promoted[0];
        _23 = &_20;
        _17 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _22, copy _23) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind unreachable];
    }

    bb8: {
        drop(_10) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        return;
    }

    bb10: {
        _36 = copy _29 as *const () (PtrToPtr);
        _37 = copy _36 as usize (Transmute);
        _38 = SizeOf([i32; 3]);
        _39 = Ne(copy _38, const 0_usize);
        _40 = Eq(copy _37, const 0_usize);
        _41 = BitAnd(copy _40, copy _39);
        _42 = Not(copy _41);
        assert(copy _42, "null pointer dereference occurred") -> [success: bb11, unwind unreachable];
    }

    bb11: {
        (*_29) = [const 1_i32, const 2_i32, const 3_i32];
        _11 = move _15 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit));
        _10 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _11) -> [return: bb5, unwind unreachable];
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

alloc2 (size: 1, align: 1) {
    0a                                              │ .
}

alloc1 (size: 0, align: 1) {}

const main::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

alloc2 (size: 1, align: 1) {
    0a                                              │ .
}

alloc1 (size: 0, align: 1) {}
