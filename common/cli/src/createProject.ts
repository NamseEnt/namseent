import * as fs from "fs/promises";
import * as path from "path";

export async function createProject(projectName: string): Promise<void> {
  const destination = path.resolve(process.cwd(), projectName);

  await fs.mkdir(destination, { recursive: true });
  await fs.writeFile(
    `${destination}/package.json`,
    `{
  "name": "${projectName}",
  "version": "1.0.0",
  "scripts": {
    "test": "jest",
    "build": "tsc",
    "watch": "tsc --watch",
    "postinstall": "npm run build"
  },
  "main": "lib/index.js",
  "types": "lib/index.d.ts",
  "dependencies": {
    "common-tsconfig": "workspace:^4.4.3",
    "typescript": "*",
    "jest": "^27.0.0"
  },
  "devDependencies": {
    "@types/jest": "^27.0.2",
    "ts-jest": "^27.0.5"
  }
}
`,
  );
  await fs.writeFile(
    `${destination}/tsconfig.json`,
    `{
  "extends": "common-tsconfig/tsconfig.json",
  "compilerOptions": {
    "lib": ["ESNext"],
    "outDir": "lib",
    "noEmit": false,
    "declaration": true,
    "inlineSourceMap": true, // TODO : turn off for production build
    "inlineSources": true // TODO : turn off for production build
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}`,
  );
  await fs.mkdir(`${destination}/src`, { recursive: true });
  await fs.writeFile(`${destination}/src/index.ts`, "");
  await fs.writeFile(
    `${destination}/.gitignore`,
    `/lib

# Created by https://www.toptal.com/developers/gitignore/api/node

# Edit at https://www.toptal.com/developers/gitignore?templates=node

### Node

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
\*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
\*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

\*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

\*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variables file

.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)

.cache
.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

.cache/

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.\*

# End of https://www.toptal.com/developers/gitignore/api/node
`,
  );

  await fs.writeFile(
    `${destination}/jest.config.js`,
    `/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
`,
  );

  console.log(`Project '${projectName}' created - ${destination}`);
}
