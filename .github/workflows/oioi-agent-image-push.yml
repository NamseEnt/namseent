name: oioi-agent-image-push
on:
  push:
    paths:
      - "oioi/agent/**"
      - ".github/workflows/oioi-agent-image-push.yml"
  # push:
  #   branches:
  #     - master
  # pull_request:

concurrency:
  group: ${{ github.ref }}-oioi-agent-image-push
  cancel-in-progress: true
env:
  AWS_ACCOUNT_ID: 962920162112
  AWS_DEFAULT_REGION: ap-northeast-2
  CDK_DEFAULT_ACCOUNT: 962920162112
  CDK_DEFAULT_REGION: ap-northeast-2
  CARGO_VERSION: 1.74.0
permissions:
  id-token: write
  contents: read
jobs:
  oioi-agent-image-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # -- Agent Rust Build

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            oioi/agent/target/
          key: ${{ runner.os }}-${{ env.CARGO_VERSION }}-oioi-${{ hashFiles('oioi/agent/Cargo.lock') }}

      - name: Set up rust
        run: |
          rustup toolchain install ${{ env.CARGO_VERSION }} --profile minimal
          rustup default ${{ env.CARGO_VERSION }}

      - name: Set up aarch64 cross-compilation
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build agent
        working-directory: oioi/agent
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu

      # -- Docker

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-1 # for public ECR

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: o4b6l4b3 # should be replaced to namseent after the alias is approved by AWS.
          REPOSITORY: oioi
          IMAGE_TAG: ${{ github.sha }}
        working-directory: oioi/agent
        run: |
          for i in "linux/arm64 aarch64-unknown-linux-gnu"
          do
              set -- $i # Convert the "tuple" into the param args $1 $2...

              docker build \
                -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG \
                -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest \
                --platform $1 \
                --build-arg TARGET=$2 \
                --push \
                --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY:cache \
                --cache-from type=registry,ref=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY:cache \
                .
          done

      # -- CDK

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: |
            oioi/cdk/package-lock.json
            oioi/oioi-test-cdk/package-lock.json

      - name: Deploy test cdk
        working-directory: oioi
        run: |
          export BRANCH_NAME=$(echo "${{ github.event.ref }}" | tr "[:upper:]" "[:lower:]" | sed -e "s#refs/heads/##g" -e 's/\//-/g' -e 's/|/-/g')
          echo $BRANCH_NAME
          export STACK_NAME=$(echo $BRANCH_NAME | tr "[:upper:]" "[:lower:]" | tr -cd '[:alnum:]')
          echo $STACK_NAME

          cd cdk
          npm ci
          npm run build

          cd ../oioi-test-cdk
          npm ci
          npx cdk bootstrap
          npx cdk deploy --require-approval never

          ENDPOINT=$(aws cloudformation describe-stacks \
              --stack-name $STACK_NAME \
              --query "Stacks[0].Outputs[?OutputKey=='FunctionUrl'].OutputValue" \
              --output text)

          curl $ENDPOINT

          aws cloudformation delete-stack --stack-name $STACK_NAME
