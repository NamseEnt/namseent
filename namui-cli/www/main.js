(function () {
    'use strict';

    function runAsyncMessageLoop(target, handleRequest) {
        target.onmessage = async ({ data }) => {
            switch (data.type) {
                case "request":
                    {
                        const response = await handleRequest(data.inner);
                        target.postMessage({
                            id: data.id,
                            type: "response",
                            inner: response,
                        });
                    }
                    break;
                case "response":
                    {
                        const { id, inner } = data;
                        const resolve = waitingResponseMap.get(id);
                        if (!resolve) {
                            throw new Error("no resolve for id " + id);
                        }
                        resolve(inner);
                    }
                    break;
            }
        };
    }
    const waitingResponseMap = new Map();
    let nextRequestId = 0;
    function sendAsyncRequest(target, request, transfer) {
        const id = nextRequestId++;
        return new Promise((resolve) => {
            waitingResponseMap.set(id, resolve);
            target.postMessage({
                id,
                type: "request",
                inner: request,
            }, transfer ?? []);
        });
    }

    function promisifyRequest(request) {
        return new Promise((resolve, reject) => {
            // @ts-ignore - file size hacks
            request.oncomplete = request.onsuccess = () => resolve(request.result);
            // @ts-ignore - file size hacks
            request.onabort = request.onerror = () => reject(request.error);
        });
    }
    function createStore(dbName, storeName) {
        const request = indexedDB.open(dbName);
        request.onupgradeneeded = () => request.result.createObjectStore(storeName);
        const dbp = promisifyRequest(request);
        return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
    }
    let defaultGetStoreFunc;
    function defaultGetStore() {
        if (!defaultGetStoreFunc) {
            defaultGetStoreFunc = createStore('keyval-store', 'keyval');
        }
        return defaultGetStoreFunc;
    }
    /**
     * Get a value by its key.
     *
     * @param key
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function get(key, customStore = defaultGetStore()) {
        return customStore('readonly', (store) => promisifyRequest(store.get(key)));
    }
    /**
     * Set a value with a key.
     *
     * @param key
     * @param value
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function set(key, value, customStore = defaultGetStore()) {
        return customStore('readwrite', (store) => {
            store.put(value, key);
            return promisifyRequest(store.transaction);
        });
    }

    function cachePrefix(key) {
        return `cache-${key}`;
    }
    function cacheGet(key) {
        return get(cachePrefix(key));
    }
    function cacheSet(key, value) {
        return set(cachePrefix(key), value);
    }

    // sab i32 [0] = notification flag. 0: request, 1: response
    // sab i32 [1] = message length
    // sab u8 [8~] = message body
    async function runMessageLoop(sab, handleMessage) {
        const i32Buf = new Int32Array(sab);
        while (true) {
            // TODO: Check if the message already sent by the worker. maybe timeout and retry?
            const wait = Atomics.waitAsync(i32Buf, 0, 0);
            if (wait.async) {
                await wait.value;
            }
            const message = readMessage(sab);
            const response = handleMessage(message);
            writeMessage(response, i32Buf);
            Atomics.notify(i32Buf, 0);
        }
    }
    function readMessage(sab) {
        const messageLength = new Int32Array(sab)[1];
        const messageBuf = new Uint8Array(sab, 8, messageLength);
        // NOTE: this is for error "The provided ArrayBufferView value must not be shared."
        const cloned = new ArrayBuffer(messageBuf.byteLength);
        new Uint8Array(cloned).set(new Uint8Array(messageBuf));
        const textDecoder = new TextDecoder();
        const message = textDecoder.decode(cloned);
        return JSON.parse(message);
    }
    function writeMessage(message, i32Buf) {
        const textEncoder = new TextEncoder();
        const messageBuf = textEncoder.encode(JSON.stringify(message));
        const messageLength = messageBuf.length;
        console.log("messageLength", messageLength);
        i32Buf[1] = messageLength;
        const buffer = new Uint8Array(i32Buf.buffer, 8, messageLength);
        buffer.set(messageBuf);
    }

    const workerToMainBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    const mainToWorkerBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    runMessageLoop(workerToMainBufferSab, (message) => {
        switch (message.type) {
            case "getBaseUrl": {
                return {
                    baseUrl: window.document.URL,
                };
            }
        }
    });
    const canvas = document.createElement("canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style.width = "100%";
    canvas.style.height = "100%";
    canvas.id = "canvas";
    document.body.appendChild(canvas);
    window.addEventListener("resize", () => {
        myWorker.postMessage({
            type: "windowResize",
            width: window.innerWidth,
            height: window.innerHeight,
        });
    });
    const offscreenCanvas = canvas.transferControlToOffscreen();
    const myWorker = new Worker("worker.js", {
        type: "classic",
    });
    runAsyncMessageLoop(myWorker, async (message) => {
        switch (message.type) {
            case "cacheGet": {
                const { key } = message;
                const value = await cacheGet(key);
                return {
                    value,
                };
            }
            case "cacheSet": {
                const { key, value } = message;
                await cacheSet(key, value);
                return;
            }
        }
    });
    sendAsyncRequest(myWorker, {
        type: "init",
        workerToMainBufferSab,
        mainToWorkerBufferSab,
        offscreenCanvas,
    }, [offscreenCanvas]);
    myWorker.postMessage;
    myWorker.onerror = (e) => {
        console.error(e, "error on worker");
    };
    myWorker.onmessageerror = (e) => {
        console.log("message error from worker", e);
    };
    document.oncontextmenu = (event) => {
        event.preventDefault();
    };

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
