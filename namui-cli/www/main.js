(function () {
    'use strict';

    function runAsyncMessageLoop(target, handleRequest) {
        target.onmessage = async ({ data }) => {
            switch (data.type) {
                case "request":
                    {
                        const response = await handleRequest(data.inner);
                        target.postMessage({
                            id: data.id,
                            type: "response",
                            inner: response,
                        });
                    }
                    break;
                case "response":
                    {
                        const { id, inner } = data;
                        const resolve = waitingResponseMap.get(id);
                        if (!resolve) {
                            throw new Error("no resolve for id " + id);
                        }
                        resolve(inner);
                    }
                    break;
            }
        };
    }
    const waitingResponseMap = new Map();
    let nextRequestId = 0;
    function sendAsyncRequest(target, request, transfer) {
        const id = nextRequestId++;
        return new Promise((resolve) => {
            waitingResponseMap.set(id, resolve);
            target.postMessage({
                id,
                type: "request",
                inner: request,
            }, transfer ?? []);
        });
    }

    const queue = [];
    async function waitWebEvent() {
        while (queue.length === 0) {
            await new Promise((resolve) => setTimeout(resolve, 0));
        }
        return queue.shift();
    }
    document.addEventListener("mouseup", (e) => {
        e.preventDefault();
        queue.push({
            MouseDown: {
                x: e.clientX,
                y: e.clientY,
            },
        });
    });

    // sab i32 [0] = notification flag. 0: request, 1: response
    // sab i32 [1] = message length
    // sab u8 [8~] = message body
    async function runMessageLoopForMain(sab, handleMessage) {
        const i32Buf = new Int32Array(sab);
        while (true) {
            // TODO: Check if the message already sent by the worker. maybe timeout and retry?
            const wait = Atomics.waitAsync(i32Buf, 0, 0);
            if (wait.async) {
                await wait.value;
            }
            const message = readMessage(sab);
            const response = await handleMessage(message);
            writeMessage(response, i32Buf);
            Atomics.notify(i32Buf, 0);
        }
    }
    function readMessage(sab) {
        const messageLength = new Int32Array(sab)[1];
        const messageBuf = new Uint8Array(sab, 8, messageLength);
        // NOTE: this is for error "The provided ArrayBufferView value must not be shared."
        const cloned = new ArrayBuffer(messageBuf.byteLength);
        new Uint8Array(cloned).set(new Uint8Array(messageBuf));
        const textDecoder = new TextDecoder();
        const message = textDecoder.decode(cloned);
        return JSON.parse(message);
    }
    function writeMessage(message, i32Buf) {
        const textEncoder = new TextEncoder();
        const messageBuf = textEncoder.encode(JSON.stringify(message));
        const messageLength = messageBuf.length;
        i32Buf[1] = messageLength;
        const buffer = new Uint8Array(i32Buf.buffer, 8, messageLength);
        buffer.set(messageBuf);
    }

    const workerToMainBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    const mainToWorkerBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    runMessageLoopForMain(workerToMainBufferSab, async (message) => {
        switch (message.type) {
            case "getBaseUrl": {
                return {
                    baseUrl: window.document.URL,
                };
            }
            case "webEvent": {
                const webEvent = await waitWebEvent();
                return {
                    webEvent,
                };
            }
        }
    });
    const canvas = document.createElement("canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style.width = "100%";
    canvas.style.height = "100%";
    canvas.id = "canvas";
    document.body.appendChild(canvas);
    const bitmapRendererCtx = canvas.getContext("bitmaprenderer");
    if (!bitmapRendererCtx) {
        throw new Error("no bitmapRendererCtx");
    }
    window.addEventListener("resize", () => {
        myWorker.postMessage({
            type: "windowResize",
            width: window.innerWidth,
            height: window.innerHeight,
        });
    });
    const myWorker = new Worker("worker.js", {
        type: "classic",
    });
    runAsyncMessageLoop(myWorker, async (message) => {
        switch (message.type) {
            case "imageBitmap": {
                const { imageBitmap, } = message;
                bitmapRendererCtx.transferFromImageBitmap(imageBitmap);
                return {};
            }
        }
    });
    sendAsyncRequest(myWorker, {
        type: "init",
        workerToMainBufferSab,
        mainToWorkerBufferSab,
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight,
    }, []);
    myWorker.postMessage;
    myWorker.onerror = (e) => {
        console.error(e, "error on worker");
    };
    myWorker.onmessageerror = (e) => {
        console.log("message error from worker", e);
    };
    document.oncontextmenu = (event) => {
        event.preventDefault();
    };

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
