(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('idb-keyval')) :
    typeof define === 'function' && define.amd ? define(['idb-keyval'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.idbKeyval));
})(this, (function (idbKeyval) { 'use strict';

    function cachePrefix(key) {
        return `cache-${key}`;
    }
    function cacheGet(key) {
        return idbKeyval.get(cachePrefix(key));
    }
    function cacheSet(key, value) {
        return idbKeyval.set(cachePrefix(key), value);
    }

    // sab i32 [0] = notification flag. 0: request, 1: response
    // sab i32 [1] = message length
    // sab u8 [8~] = message body
    async function runMessageLoop(sab, handleMessage) {
        const i32Buf = new Int32Array(sab);
        while (true) {
            // TODO: Check if the message already sent by the worker. maybe timeout and retry?
            const wait = Atomics.waitAsync(i32Buf, 0, 0);
            if (wait.async) {
                await wait.value;
            }
            const message = readMessage(sab);
            const response = handleMessage(message);
            writeMessage(response, i32Buf);
            Atomics.notify(i32Buf, 0);
        }
    }
    function readMessage(sab) {
        const messageLength = new Int32Array(sab)[1];
        const messageBuf = new Uint8Array(sab, 8, messageLength);
        // NOTE: this is for error "The provided ArrayBufferView value must not be shared."
        const cloned = new ArrayBuffer(messageBuf.byteLength);
        new Uint8Array(cloned).set(new Uint8Array(messageBuf));
        const textDecoder = new TextDecoder();
        const message = textDecoder.decode(cloned);
        return JSON.parse(message);
    }
    function writeMessage(message, i32Buf) {
        const textEncoder = new TextEncoder();
        const messageBuf = textEncoder.encode(JSON.stringify(message));
        const messageLength = messageBuf.length;
        console.log("messageLength", messageLength);
        i32Buf[1] = messageLength;
        const buffer = new Uint8Array(i32Buf.buffer, 8, messageLength);
        buffer.set(messageBuf);
    }

    const workerToMainBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    const mainToWorkerBufferSab = new SharedArrayBuffer(16 * 1024 * 1024);
    runMessageLoop(workerToMainBufferSab, (message) => {
        switch (message.type) {
            case "getBaseUrl": {
                return {
                    baseUrl: window.document.URL,
                };
            }
        }
    });
    const myWorker = new Worker("worker.js", {
        type: "classic",
    });
    myWorker.postMessage({
        type: "init",
        workerToMainBufferSab,
        mainToWorkerBufferSab,
    });
    myWorker.onerror = (e) => {
        console.error(e, "error on worker");
    };
    myWorker.onmessage = ({ data }) => {
        console.log("message from worker", data);
        switch (data.type) {
            case "cacheGet": {
                const { key } = data;
                const value = cacheGet(key);
                myWorker.postMessage({
                    type: "cacheGet",
                    key,
                    value,
                });
                break;
            }
            case "cacheSet": {
                const { key, value } = data;
                cacheSet(key, value);
                myWorker.postMessage({
                    type: "cacheSet",
                    key,
                    value,
                });
                break;
            }
        }
    };
    myWorker.onmessageerror = (e) => {
        console.log("message error from worker", e);
    };

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
