use crate::*;

impl<'tcx> MyVisitor<'_, 'tcx> {
    pub fn on_function(
        &mut self,
        id: &rustc_hir::def_id::DefId,
        args: &'tcx rustc_middle::ty::List<GenericArg<'tcx>>,
    ) -> String {
        if let Some(value) = self.fn_names.get(&(*id, args)) {
            return value.clone();
        }

        let Some(instance) = self.try_resolve(*id, args) else {
            panic!("try_resolve failed: {id:?}, {args:?}");
        };

        if let InstanceKind::Virtual(_, _) = instance.def {
            println!("fn_call, {instance:?}");
            return "_fn_call".to_string();
        }

        if [
            "std::ops::FnOnce::call_once",
            "std::ops::FnMut::call_mut",
            "std::ops::Fn::call",
        ]
        .contains(&self.tcx.def_path_str(id).as_str())
        {
            return "_fn_call".to_string();
        }

        let fn_name = def_normalized_name(self.tcx, &instance.def_id(), instance.args);

        if !is_known_fn(&fn_name)
            && !self.handled_instances.contains(&instance)
            && !self.todo_instances.contains(&instance)
        {
            self.todo_instances.insert(instance);
        }

        fn_name
    }
}

fn is_known_fn(fn_name: &str) -> bool {
    [
        "std__intrinsics__assert_inhabited",
        "std__intrinsics__is_val_statically_known_ty_bool",
        "core__intrinsics__atomic_load",
        "std__sync__atomic__atomic_load",
        "core__intrinsics__needs_drop",
        "std__intrinsics__abort",
        "core__core_arch__wasm32__atomic__llvm_atomic_wait_i32",
        "std__intrinsics__cold_path",
        "std__option__unwrap_failed",
        "std__io___print",
        "core__panicking__panic_nounwind_fmt",
        "std__alloc__handle_alloc_error",
        "std__intrinsics__arith_offset",
        "std__alloc__Layout__is_size_align_valid",
        "alloc__alloc____rust_alloc",
        "alloc__alloc____rust_dealloc",
        "alloc__alloc____rust_realloc",
        "alloc__alloc____rust_alloc_zeroed",
        "alloc__alloc____rust_no_alloc_shim_is_unstable_v2",
        // std::intrinsics
        "std__intrinsics__atomic_cxchg",
        "std__intrinsics__atomic_cxchgweak",
        "std__intrinsics__atomic_load",
        "std__intrinsics__atomic_store",
        "std__intrinsics__atomic_xchg",
        "std__intrinsics__atomic_xadd",
        "std__intrinsics__atomic_xsub",
        "std__intrinsics__atomic_and",
        "std__intrinsics__atomic_nand",
        "std__intrinsics__atomic_or",
        "std__intrinsics__atomic_xor",
        "std__intrinsics__atomic_max",
        "std__intrinsics__atomic_min",
        "std__intrinsics__atomic_umin",
        "std__intrinsics__atomic_umax",
        "std__intrinsics__atomic_fence",
        "std__intrinsics__atomic_singlethreadfence",
        "std__intrinsics__breakpoint",
        "std__intrinsics__rustc_peek",
        "std__intrinsics__abort",
        "std__intrinsics__unreachable",
        "std__intrinsics__assert_inhabited",
        "std__intrinsics__assert_zero_valid",
        "std__intrinsics__assert_mem_uninitialized_valid",
        "std__intrinsics__caller_location",
        "std__intrinsics__forget",
        "std__intrinsics__transmute",
        "std__intrinsics__transmute_unchecked",
        "std__intrinsics__needs_drop",
        "std__intrinsics__offset",
        "std__intrinsics__arith_offset_ty_u8",
        "std__intrinsics__arith_offset_ty_u16",
        "std__intrinsics__arith_offset_ty_u32",
        "std__intrinsics__arith_offset_ty_u64",
        "std__intrinsics__arith_offset_ty_u128",
        "std__intrinsics__arith_offset_ty_usize",
        "std__intrinsics__arith_offset_ty_i8",
        "std__intrinsics__arith_offset_ty_i16",
        "std__intrinsics__arith_offset_ty_i32",
        "std__intrinsics__arith_offset_ty_i64",
        "std__intrinsics__arith_offset_ty_i128",
        "std__intrinsics__arith_offset_ty_isize",
        "std__intrinsics__slice_get_unchecked",
        "std__intrinsics__ptr_mask",
        "std__intrinsics__volatile_copy_nonoverlapping_memory",
        "std__intrinsics__volatile_copy_memory",
        "std__intrinsics__volatile_set_memory",
        "std__intrinsics__volatile_load",
        "std__intrinsics__volatile_store",
        "std__intrinsics__unaligned_volatile_load",
        "std__intrinsics__unaligned_volatile_store",
        "std__intrinsics__sqrtf16",
        "std__intrinsics__sqrtf32",
        "std__intrinsics__sqrtf64",
        "std__intrinsics__sqrtf128",
        "std__intrinsics__powif16",
        "std__intrinsics__powif32",
        "std__intrinsics__powif64",
        "std__intrinsics__powif128",
        "std__intrinsics__sinf16",
        "std__intrinsics__sinf32",
        "std__intrinsics__sinf64",
        "std__intrinsics__sinf128",
        "std__intrinsics__cosf16",
        "std__intrinsics__cosf32",
        "std__intrinsics__cosf64",
        "std__intrinsics__cosf128",
        "std__intrinsics__powf16",
        "std__intrinsics__powf32",
        "std__intrinsics__powf64",
        "std__intrinsics__powf128",
        "std__intrinsics__expf16",
        "std__intrinsics__expf32",
        "std__intrinsics__expf64",
        "std__intrinsics__expf128",
        "std__intrinsics__exp2f16",
        "std__intrinsics__exp2f32",
        "std__intrinsics__exp2f64",
        "std__intrinsics__exp2f128",
        "std__intrinsics__logf16",
        "std__intrinsics__logf32",
        "std__intrinsics__logf64",
        "std__intrinsics__logf128",
        "std__intrinsics__log10f16",
        "std__intrinsics__log10f32",
        "std__intrinsics__log10f64",
        "std__intrinsics__log10f128",
        "std__intrinsics__log2f16",
        "std__intrinsics__log2f32",
        "std__intrinsics__log2f64",
        "std__intrinsics__log2f128",
        "std__intrinsics__fmaf16",
        "std__intrinsics__fmaf32",
        "std__intrinsics__fmaf64",
        "std__intrinsics__fmaf128",
        "std__intrinsics__fmuladdf16",
        "std__intrinsics__fmuladdf32",
        "std__intrinsics__fmuladdf64",
        "std__intrinsics__fmuladdf128",
        "std__intrinsics__floorf16",
        "std__intrinsics__floorf32",
        "std__intrinsics__floorf64",
        "std__intrinsics__floorf128",
        "std__intrinsics__ceilf16",
        "std__intrinsics__ceilf32",
        "std__intrinsics__ceilf64",
        "std__intrinsics__ceilf128",
        "std__intrinsics__truncf16",
        "std__intrinsics__truncf32",
        "std__intrinsics__truncf64",
        "std__intrinsics__truncf128",
        "std__intrinsics__round_ties_even_f16",
        "std__intrinsics__round_ties_even_f32",
        "std__intrinsics__round_ties_even_f64",
        "std__intrinsics__round_ties_even_f128",
        "std__intrinsics__roundf16",
        "std__intrinsics__roundf32",
        "std__intrinsics__roundf64",
        "std__intrinsics__roundf128",
        "std__intrinsics__fadd_fast",
        "std__intrinsics__fsub_fast",
        "std__intrinsics__fmul_fast",
        "std__intrinsics__fdiv_fast",
        "std__intrinsics__frem_fast",
        "std__intrinsics__float_to_int_unchecked",
        "std__intrinsics__fadd_algebraic",
        "std__intrinsics__fsub_algebraic",
        "std__intrinsics__fmul_algebraic",
        "std__intrinsics__fdiv_algebraic",
        "std__intrinsics__frem_algebraic",
        "std__intrinsics__ctpop",
        "std__intrinsics__ctlz",
        "std__intrinsics__ctlz_nonzero",
        "std__intrinsics__cttz",
        "std__intrinsics__cttz_nonzero",
        "std__intrinsics__bswap",
        "std__intrinsics__bitreverse",
        "std__intrinsics__three_way_compare",
        "std__intrinsics__add_with_overflow",
        "std__intrinsics__sub_with_overflow",
        "std__intrinsics__mul_with_overflow",
        "std__intrinsics__carrying_mul_add",
        "std__intrinsics__exact_div",
        "std__intrinsics__unchecked_div",
        "std__intrinsics__unchecked_rem",
        "std__intrinsics__unchecked_shl",
        "std__intrinsics__unchecked_shr",
        "std__intrinsics__unchecked_add",
        "std__intrinsics__unchecked_sub",
        "std__intrinsics__unchecked_mul",
        "std__intrinsics__rotate_left",
        "std__intrinsics__rotate_right",
        "std__intrinsics__wrapping_add",
        "std__intrinsics__wrapping_sub",
        "std__intrinsics__wrapping_mul",
        "std__intrinsics__saturating_add",
        "std__intrinsics__saturating_sub",
        "std__intrinsics__unchecked_funnel_shl",
        "std__intrinsics__unchecked_funnel_shr",
        "std__intrinsics__read_via_copy",
        "std__intrinsics__write_via_move",
        "std__intrinsics__discriminant_value",
        "std__intrinsics__catch_unwind",
        "std__intrinsics__nontemporal_store",
        "std__intrinsics__ptr_offset_from",
        "std__intrinsics__ptr_offset_from_unsigned",
        "std__intrinsics__raw_eq",
        "std__intrinsics__compare_bytes",
        "std__intrinsics__black_box",
        "std__intrinsics__const_eval_select",
        "std__intrinsics__contract_check_ensures",
        "std__intrinsics__vtable_size",
        "std__intrinsics__vtable_align",
        "std__intrinsics__size_of",
        "std__intrinsics__align_of",
        "std__intrinsics__variant_count",
        "std__intrinsics__size_of_val",
        "std__intrinsics__align_of_val",
        "std__intrinsics__type_name",
        "std__intrinsics__type_id",
        "std__intrinsics__aggregate_raw_ptr",
        "std__intrinsics__ptr_metadata",
        "std__intrinsics__copy_nonoverlapping",
        "std__intrinsics__copy",
        "std__intrinsics__write_bytes",
        "std__intrinsics__minnumf16",
        "std__intrinsics__minnumf32",
        "std__intrinsics__minnumf64",
        "std__intrinsics__minnumf128",
        "std__intrinsics__maxnumf16",
        "std__intrinsics__maxnumf32",
        "std__intrinsics__maxnumf64",
        "std__intrinsics__maxnumf128",
        "std__intrinsics__fabsf16",
        "std__intrinsics__fabsf32",
        "std__intrinsics__fabsf64",
        "std__intrinsics__fabsf128",
        "std__intrinsics__copysignf16",
        "std__intrinsics__copysignf32",
        "std__intrinsics__copysignf64",
        "std__intrinsics__copysignf128",
        "std__intrinsics__autodiff",
        "std__intrinsics__va_copy",
        "std__intrinsics__va_arg",
        "std__intrinsics__va_end",
    ]
    .iter()
    .any(|name| fn_name.starts_with(name))
}
