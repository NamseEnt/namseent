use std::path::Path;

fn main() {
    let root = std::env::var("CARGO_MANIFEST_DIR").unwrap();
    let dir = std::fs::read_dir(Path::new(&root).parent().unwrap()).unwrap();

    let mut latest_version: Option<usize> = None;
    for entry in dir {
        let entry = entry.unwrap();
        let path = entry.path();
        if path.is_dir() {
            let name = path.file_name().unwrap().to_str().unwrap();
            let Ok(value) = str::parse::<usize>(name) else {
                continue;
            };
            if latest_version.is_none() || value > latest_version.unwrap() {
                latest_version = Some(value);
            }
        }
    }

    let Some(latest_version) = latest_version else {
        panic!("no version found");
    };

    write_if_changed(
        std::path::Path::new("./src/latest_version.rs"),
        format!(
            "//! Generated by build.rs
pub use schema_{latest_version} as schema;
pub const LATEST_VERSION: usize = {latest_version};
",
        ),
    );
}

fn write_if_changed(path: impl AsRef<Path>, contents: impl ToString) {
    let contents = contents.to_string();
    if let Ok(existing) = std::fs::read_to_string(&path) {
        if existing == contents {
            return;
        }
    }
    println!("Writing {}", path.as_ref().display());
    std::fs::write(&path, contents).unwrap();
}
