// NOTE: Don't edit this file manually. It is generated by build.rs.

pub mod auth;
pub mod cg;
pub mod image;
pub mod memo;
pub mod project;
pub mod sequence;

pub async fn handle_api(
    api_name: &str,
    session: Option<crate::documents::SessionDocument>,
    body: &[u8],
) -> Result<Vec<u8>, Box<dyn std::error::Error + Send + Sync>> {
    match api_name {
        "log_in_with_github_oauth_code" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::log_in_with_github_oauth_code::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = auth::log_in_with_github_oauth_code(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "validate_session" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::validate_session::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = auth::validate_session(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "get_user_id" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::get_user_id::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = auth::get_user_id(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_project_sequences" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::list_project_sequences::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::list_project_sequences(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "create_sequence" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::create_sequence::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::create_sequence(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "undo_update" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::undo_update::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::undo_update(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "redo_update" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::redo_update::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::redo_update(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "update_sequence" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::update_sequence::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::update_sequence(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "update_sequence_cut" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::update_sequence_cut::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::update_sequence_cut(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "get_sequence_and_project_shared_data" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::get_sequence_and_project_shared_data::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response =
                sequence::get_sequence_and_project_shared_data(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "delete_sequence" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::delete_sequence::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = sequence::delete_sequence(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "put_image_meta_data" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::put_image_meta_data::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = image::put_image_meta_data(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "prepare_upload_image" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::prepare_upload_image::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = image::prepare_upload_image(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_images" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::list_images::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = image::list_images(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "delete_image" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::delete_image::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = image::delete_image(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "create_project" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::create_project::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::create_project(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_editable_projects" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::list_editable_projects::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::list_editable_projects(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "edit_user_acl" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::edit_user_acl::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::edit_user_acl(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_user_acls" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::list_user_acls::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::list_user_acls(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "update_server_project_shared_data" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::update_server_project_shared_data::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::update_server_project_shared_data(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "update_client_project_shared_data" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::update_client_project_shared_data::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = project::update_client_project_shared_data(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "request_put_psd_presigned_url" => {
            let Ok(api_request) =
                serde_json::from_slice::<rpc::request_put_psd_presigned_url::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = cg::request_put_psd_presigned_url(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "complete_put_psd" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::complete_put_psd::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = cg::complete_put_psd(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_cg_files" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::list_cg_files::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = cg::list_cg_files(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "get_cg_file" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::get_cg_file::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = cg::get_cg_file(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "list_sequence_memos" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::list_sequence_memos::Request>(body)
            else {
                return Err("Fail to parse body".into());
            };
            let response = memo::list_sequence_memos(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "create_memo" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::create_memo::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = memo::create_memo(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        "delete_memo" => {
            let Ok(api_request) = serde_json::from_slice::<rpc::delete_memo::Request>(body) else {
                return Err("Fail to parse body".into());
            };
            let response = memo::delete_memo(session, api_request).await;
            Ok(serde_json::to_vec(&response).unwrap())
        }
        _ => Err("Unknown api name".into()),
    }
}
